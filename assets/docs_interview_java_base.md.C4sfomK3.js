import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Ds6Eueu6.js";const k=JSON.parse('{"title":"Java-基础（17）","description":"","frontmatter":{},"headers":[],"relativePath":"docs/interview/java/base.md","filePath":"docs/interview/java/base.md"}'),e={name:"docs/interview/java/base.md"};function n(p,s,o,h,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="java-基础-17" tabindex="-1">Java-基础（17） <a class="header-anchor" href="#java-基础-17" aria-label="Permalink to &quot;Java-基础（17）&quot;">​</a></h1><h2 id="_1-java-中-jdk-和-jre-有什么区别-1️⃣" tabindex="-1">1. Java 中 JDK 和 JRE 有什么区别？1️⃣ <a class="header-anchor" href="#_1-java-中-jdk-和-jre-有什么区别-1️⃣" aria-label="Permalink to &quot;1. Java 中 JDK 和 JRE 有什么区别？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li><strong>JDK</strong>：<code>Java Development Kit</code>（Java 开发工具包），是整个 Java 的核心。JDK 中包括了 Java 编译器、JRE（Java 运行环境）、JavaDoc 文档生成器和其他一些工具。</li><li><strong>JRE</strong>：<code>Java Runtime Environment</code>（Java 运行时环境），它用于运行已编译的Java应用程序。它里面包含了 Java 虚拟机、类加载器、运行时类库和其他支持文件。</li></ul></div><h2 id="_2-值传递和引用传递的区别-3️⃣🍇" tabindex="-1">2. 值传递和引用传递的区别？3️⃣🍇 <a class="header-anchor" href="#_2-值传递和引用传递的区别-3️⃣🍇" aria-label="Permalink to &quot;2. 值传递和引用传递的区别？3️⃣🍇&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li><strong>值传递</strong>：是指在调用函数的过程中，将实际参数复制一份传递到函数中。这样在函数中如果对参数进行修改，将不会影响到实际参数。</li><li><strong>引用传递</strong>：是指在调用函数的过程中，将实际参数的地址直接传递到函数中，如果在函数中对参数所进行的修改，将影响到实际参数。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><p>！！！Java 中不存在引用传递。而之所以会出现 <strong>引用传递</strong> 的样子，其实是 Java 在传递参数的过程中，是通过值传递，传递的是对象的引用。</p></div><h2 id="_3-java-中深拷贝、浅拷贝是什么-4️⃣🍈" tabindex="-1">3. Java 中深拷贝、浅拷贝是什么？4️⃣🍈 <a class="header-anchor" href="#_3-java-中深拷贝、浅拷贝是什么-4️⃣🍈" aria-label="Permalink to &quot;3. Java 中深拷贝、浅拷贝是什么？4️⃣🍈&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li><strong>浅拷贝</strong>：浅拷贝是对对象的引用的复制，而不是对象本身的复制。</li><li><strong>深拷贝</strong>：深拷贝是对对象的完全复制，包括对象内部的所有成员变量。</li></ul><p>说的明白点，浅拷贝就拷贝了一个地址，随着对象的修改，所有引用这个地址的对象都会跟这变。而深拷贝可以理解为是创建了一个新的对象，原对象不管怎么变，都不会影响到拷贝的对象。</p></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><p>深拷贝的方式一般使用两种</p><ul><li>重写 clone 方法</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 核心代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cloneable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get/Set 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CloneNotSupportedException {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>对象序列化</li></ul><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 核心代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T extends Serializable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deepCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T object) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ByteArrayOutputStream outputStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ObjectOutputStream output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputStream);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ByteArrayInputStream inputStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ObjectInputStream input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(inputStream);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Exception </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="_4-和-equals-的区别-1️⃣🍉" tabindex="-1">4. == 和 equals 的区别？1️⃣🍉 <a class="header-anchor" href="#_4-和-equals-的区别-1️⃣🍉" aria-label="Permalink to &quot;4. == 和 equals 的区别？1️⃣🍉&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li><strong>==</strong>：== 是用于比较两个变量或对象引用是否相等的操作符。</li><li><strong>equals</strong>：equals 是 Java 中 Object 对象的一个方法，用于比较两个对象是否相等。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><table tabindex="0"><thead><tr><th></th><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>==</td><td>值比较</td><td>引用比较</td></tr><tr><td>equals</td><td>不支持</td><td>根据重写的equals进行判断</td></tr></tbody></table><ul><li>如果是两个基本数据类型使用 == 进行比较，则比较的是具体的值。</li><li>如果是两个引用数据类型使用 == 进行比较，则比较的是他们的引用地址。</li></ul><blockquote><p>eg：好比是 <strong>浅拷贝</strong> 对象，它们使用 == 进行比较，则一定为 true。</p></blockquote><ul><li>equals 无法对基本数据类型进行比较。</li><li>在使用 equals 方法时，需要看当前对象是否重写了该方法</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认 Object 类中的 equals 方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="_5-hashcode-相同的-equals-一定相同吗-1️⃣🍊" tabindex="-1">5. hashcode 相同的，equals 一定相同吗？1️⃣🍊 <a class="header-anchor" href="#_5-hashcode-相同的-equals-一定相同吗-1️⃣🍊" aria-label="Permalink to &quot;5. hashcode 相同的，equals 一定相同吗？1️⃣🍊&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><p>答案：不一定。</p><ul><li>hashCode() 方法返回的是当前当前对象的哈希值。</li><li>equals() 方法返回的的，当前对象和传递对象的比较。</li></ul><p>在 Java 中，hashCode 返回值为 int 类型，也就是说最多有 2^32 个 hashCode 值，肯定会存在两个不相同的对象，得到同一个 hashCode（这个叫做 hash 碰撞）。</p></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><p>hash 碰撞是指两个不同的输入值，经过哈希函数的处理后，得到相同的输出值，这种情况被称之为哈希碰撞。</p></div><h2 id="_6-抽象类中必须要有抽象方法吗-2️⃣🍋" tabindex="-1">6. 抽象类中必须要有抽象方法吗？2️⃣🍋 <a class="header-anchor" href="#_6-抽象类中必须要有抽象方法吗-2️⃣🍋" aria-label="Permalink to &quot;6. 抽象类中必须要有抽象方法吗？2️⃣🍋&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><p>答案：不是。</p><ul><li>Java 中，用 <code>abstract</code> 关键字修饰的类，叫做抽象类。</li></ul><p>通过官方的定义，我们可以发现，在定义中，并没有提到抽象方法~。</p><p>也就是说，不需要抽象类中要有抽象方法。</p></div><h2 id="_7-普通类和抽象类有哪些区别-1️⃣" tabindex="-1">7. 普通类和抽象类有哪些区别？1️⃣ <a class="header-anchor" href="#_7-普通类和抽象类有哪些区别-1️⃣" aria-label="Permalink to &quot;7. 普通类和抽象类有哪些区别？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><table tabindex="0"><thead><tr><th></th><th>普通类</th><th>抽象类</th></tr></thead><tbody><tr><td>定义</td><td>普通类中不存在抽象方法</td><td>可以存在抽象方法和普通方法</td></tr><tr><td>实例化</td><td>可直接实例化</td><td>无法直接实例化</td></tr><tr><td>用途</td><td>一般用于实现具体的功能和方法</td><td>用于定义模版、框架等</td></tr><tr><td>设计原则</td><td>关注于具体的实现和细节</td><td>关注于高层次的设计和结构，强调行为和属性的共性</td></tr></tbody></table></div><h2 id="_8-接口和抽象类有什么区别-1️⃣" tabindex="-1">8. 接口和抽象类有什么区别？1️⃣ <a class="header-anchor" href="#_8-接口和抽象类有什么区别-1️⃣" aria-label="Permalink to &quot;8. 接口和抽象类有什么区别？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><table tabindex="0"><thead><tr><th></th><th>接口</th><th>抽象类</th></tr></thead><tbody><tr><td>声明</td><td><code>interface</code></td><td><code>abstract</code></td></tr><tr><td>实现</td><td><code>implements</code></td><td><code>extends</code></td></tr><tr><td>实例化</td><td>无法直接实例化</td><td>无法直接实例化</td></tr><tr><td>子类扩展数量</td><td>一个类可以实现多个接口</td><td>一个类只可以继承一个抽象类</td></tr><tr><td>控制访问权限</td><td>只能是 public</td><td>无限制</td></tr><tr><td>控制访问权限</td><td>只能是 public</td><td>无限制</td></tr></tbody></table></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><ul><li>接口类中可以定义 <code>static</code> 方法和 <code>defaule</code> 方法，但是必须要有实现。</li><li>抽象类中的抽象方法不能是 <code>private</code> 修饰</li></ul></div><h2 id="_9-重载和重写区别-2️⃣🍌" tabindex="-1">9. 重载和重写区别？2️⃣🍌 <a class="header-anchor" href="#_9-重载和重写区别-2️⃣🍌" aria-label="Permalink to &quot;9. 重载和重写区别？2️⃣🍌&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li><strong>重载</strong>：重载是指在同一个类中，可以定义多个方法名相同但参数类型、个数或顺序不同的方法（可以抛出不同的异常）。</li><li><strong>重写</strong>：重写是指在子类中重新定义父类中已有的方法，但方法名、参数类型和个数必须与父类中的方法相同。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><ul><li>重载是同一个类方法中的关系，是水平关系。</li><li>重写是父类与子类的关系，是垂直关系。</li></ul></div><h2 id="_10-基本数据类型有那些-分别是什么-1️⃣" tabindex="-1">10. 基本数据类型有那些，分别是什么？1️⃣ <a class="header-anchor" href="#_10-基本数据类型有那些-分别是什么-1️⃣" aria-label="Permalink to &quot;10. 基本数据类型有那些，分别是什么？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li>基本数据类型有 <strong>8</strong> 个：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>、<code>double</code>、<code>char</code>、<code>boolean</code></li></ul></div><h2 id="_11-string-是基础数据类型吗-1️⃣" tabindex="-1">11. String 是基础数据类型吗？1️⃣ <a class="header-anchor" href="#_11-string-是基础数据类型吗-1️⃣" aria-label="Permalink to &quot;11. String 是基础数据类型吗？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><p>答案：不是。</p><p>String 是一个引用数据类型。</p></div><h2 id="_12-string-中常用方法有那些-1️⃣" tabindex="-1">12. String 中常用方法有那些？1️⃣ <a class="header-anchor" href="#_12-string-中常用方法有那些-1️⃣" aria-label="Permalink to &quot;12. String 中常用方法有那些？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><p><code>length()</code>：返回当前字符串长度。</p><p><code>substring(int begin)</code>：返回 [begin, length) 之间的字符串。</p><p><code>equals()</code>：比较此字符串与指定的对象的 内容 是否相同。</p><p><code>isEmpty()</code>：当且仅当长度为 0 时返回 true。</p><p><code>contains(CharSequence s)</code>：此字符串包含指定子串时返回 true。</p><p><code>matches()</code>：此字符串是否匹配给定的正则表达式。</p><p><code>trim()</code>：返回字符串的副本，忽略首尾空格。</p><p>......</p></div><h2 id="_13-string-stringbuffer-stringbuilder-区别-1️⃣🍍" tabindex="-1">13. String StringBuffer StringBuilder 区别？1️⃣🍍 <a class="header-anchor" href="#_13-string-stringbuffer-stringbuilder-区别-1️⃣🍍" aria-label="Permalink to &quot;13. String StringBuffer StringBuilder 区别？1️⃣🍍&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li>String 是 final 类不能被继承且为字符串常量，而 StringBuilder 和 StringBuffer 均为字符串变量。</li><li>StringBuilder 是一个非线程安全的类，而 StringBuffer 是线程安全的。</li><li>StringBuilder 是没有对方法加锁同步的，所以毫无疑问，StringBuilder的性能要远大于StringBuffer。多数情况下建议使用 StringBuilder类。但是在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</li><li>String 一般用在少量字符串操作；StringBuffer 用于多线程环境下的大量操作；StringBuilder 用于单线程环境下的大量操作。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><ul><li>String 之所以创建好之后就不能修改的原因是：String 底层是由 char 数组构成，并且由 final 修饰，也就是说，一但 String 被创建，就没有办法去修改它的属性了。</li></ul></div><h2 id="_14-string-str-i-和-string-str-new-string-1-两种声明方式有什么区别-2️⃣🍎" tabindex="-1">14. String str=&quot;i&quot; 和 String str = new String(&quot;1&quot;) 两种声明方式有什么区别？2️⃣🍎 <a class="header-anchor" href="#_14-string-str-i-和-string-str-new-string-1-两种声明方式有什么区别-2️⃣🍎" aria-label="Permalink to &quot;14. String str=&quot;i&quot; 和 String str = new String(&quot;1&quot;) 两种声明方式有什么区别？2️⃣🍎&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li>String str = &quot;i&quot;;</li></ul><blockquote><p>该方式初始化字符串的时候，Java 虚拟机会将值分配至<code>常量池</code>中。</p></blockquote><ul><li>String str = new String(&quot;1&quot;);</li></ul><blockquote><p>使用该方式初始化字符串的时候，Java 虚拟机会将值分配至<code>堆内存</code>中。</p></blockquote></div><div class="tip custom-block"><p class="custom-block-title">拓展</p><ul><li><strong>栈</strong>、<strong>堆</strong>、<strong>常量池</strong></li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-8DRDd" id="tab-tK7agGp" checked><label data-title="栈" for="tab-tK7agGp">栈</label><input type="radio" name="group-8DRDd" id="tab-EjxgPSt"><label data-title="堆" for="tab-EjxgPSt">堆</label><input type="radio" name="group-8DRDd" id="tab-y5ejNAR"><label data-title="常量池" for="tab-y5ejNAR">常量池</label></div><div class="blocks"><div class="language-txt vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>存放基本类型的数据和对象的引用，但对象本身不存放在栈中，而是存放在堆中。</span></span></code></pre></div><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>存放用new产生的数据。</span></span></code></pre></div><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>存放常量。</span></span></code></pre></div></div></div></div><h2 id="_15-string-str-new-string-1-在这段代码中-一共创建了多少个对象-3️⃣🍏" tabindex="-1">15. String str = new String(&quot;1&quot;); 在这段代码中，一共创建了多少个对象？3️⃣🍏 <a class="header-anchor" href="#_15-string-str-new-string-1-在这段代码中-一共创建了多少个对象-3️⃣🍏" aria-label="Permalink to &quot;15. String str = new String(&quot;1&quot;); 在这段代码中，一共创建了多少个对象？3️⃣🍏&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><p>答案：1或者2个。</p><p>解释：new String() 会先去常量池中判断有没有此字符串，如果有则只在堆上创建一个字符串并且指向常量池中的字符串；如果常量池中没有此字符串，则会创建 2 个对象，先在常量池中新建此字符串，然后把此引用返回给堆上的对象。</p></div><h2 id="_16-final、finally-和-finalize-是什么-1️⃣" tabindex="-1">16. final、finally 和 finalize 是什么？1️⃣ <a class="header-anchor" href="#_16-final、finally-和-finalize-是什么-1️⃣" aria-label="Permalink to &quot;16. final、finally 和 finalize 是什么？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li>final</li></ul><blockquote><p>final 表示终态。一般用于变量、参数、方法、类的修饰。</p></blockquote><blockquote><p>被 final 修饰的变量、参数都表示<code>不可变</code>。基本数据类型被 final 修饰后，变为常量，切不可变。引用数据类型被 final 修饰后，引用地址不可变，但是地址所指向的内容是可变的。</p></blockquote><blockquote><p>被 final 修饰的方法是不可被重写的。</p></blockquote><blockquote><p>被 final 修饰的类是终态的，无法被继承。</p></blockquote><ul><li>finally</li></ul><blockquote><p>一般和 try catch 中串联使用。(我们可以使用 try-finally 或者 try-catch-finally 来进行类似关闭 JDBC 连接、保证 unlock 锁等动作)</p></blockquote><ul><li>finalize</li></ul><blockquote><p>它为 java.lang.Object 类中的一个方法，它的设计目的是保证对象在被垃圾收集前完成特定资源的回收。</p></blockquote></div><h2 id="_17-io-流分为几种-1️⃣" tabindex="-1">17. IO 流分为几种？1️⃣ <a class="header-anchor" href="#_17-io-流分为几种-1️⃣" aria-label="Permalink to &quot;17. IO 流分为几种？1️⃣&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">考点</p><ul><li>按照流方向分为：输入流、输出流；</li><li>按照流操作的数据单位分为：字节流、字符流；</li></ul></div>`,43)]))}const u=i(e,[["render",n]]);export{k as __pageData,u as default};
