import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Ds6Eueu6.js";const o=JSON.parse('{"title":"Executors","description":"","frontmatter":{},"headers":[],"relativePath":"docs/knowledge/java/class/executors.md","filePath":"docs/knowledge/java/class/executors.md"}'),l={name:"docs/knowledge/java/class/executors.md"};function h(t,s,p,k,d,E){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="executors" tabindex="-1">Executors <a class="header-anchor" href="#executors" aria-label="Permalink to &quot;Executors&quot;">​</a></h1><h2 id="executors-介绍" tabindex="-1">Executors 介绍 <a class="header-anchor" href="#executors-介绍" aria-label="Permalink to &quot;Executors 介绍&quot;">​</a></h2><p><code>Executors</code> 是 Java 提供给我们的一个工具类，主要用于创建线程池，并返回一个 <code>ExecutorService</code> 的一个实现。</p><h2 id="线程池介绍-jdk-17" tabindex="-1">线程池介绍（JDK 17） <a class="header-anchor" href="#线程池介绍-jdk-17" aria-label="Permalink to &quot;线程池介绍（JDK 17）&quot;">​</a></h2><p>接下来我们就学习一下 <code>Executors</code> 可以创建的线程池。</p><h3 id="newcachedthreadpool" tabindex="-1">newCachedThreadPool <a class="header-anchor" href="#newcachedthreadpool" aria-label="Permalink to &quot;newCachedThreadPool&quot;">​</a></h3><p>先来看一下源码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCachedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                    60L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SynchronousQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>newCachedThreadPool</code> 创建了一个没有核心线程（corePoolSize 为 0）且最大线程数可以接近无限的线程池。而且使用了 <code>SynchronousQueue</code> 队列，该队列是一种线程安全，且容量为 0 的队列。</p><div class="tip custom-block"><p class="custom-block-title">拓展</p><p>SynchronousQueue 队列，是一个容量为 0 的队列。</p><p>所以没有一个地方来暂存元素，导致每次取数据都要先阻塞，直到有数据被放入。</p><p>同理，每次放数据的时候也会阻塞，直到有消费者来取。</p></div><p>这种线程池可以根据任务量的增加动态地创建新线程，并且可以在任务执行完毕后回收空闲的线程。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>如果主线程提交任务速度高于 maximumPool 中线程处理任务速度时，CachedThreadPool 会不断创建新线程。</p><p>极端情况下，CachedThreadPool 会因为创建过多线程而耗尽 CPU 和内存资源。</p></div><h3 id="newfixedthreadpool" tabindex="-1">newFixedThreadPool <a class="header-anchor" href="#newfixedthreadpool" aria-label="Permalink to &quot;newFixedThreadPool&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nThreads) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nThreads, nThreads,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                    0L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedBlockingQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>newFixedThreadPool</code> 创建一个固定大小的线程池。当有新的任务提交时，如果线程池中的所有线程都在执行任务，则新的任务会被放入等待队列中，直到有线程可用为止。 <code>LinkedBlockingQueue</code> 是一个无界的阻塞队列，它的大小是没有限制的，因此，当任务提交到线程池时，如果线程池中的线程正在执行任务，那么新提交的任务将被放入 LinkedBlockingQueue 中等待执行，直到有可用的线程来执行任务。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>使用 <code>newFixedThreadPool()</code> 方法创建线程池时，队列的大小实际上是无限制的，但是需要注意的是，如果任务提交速度过快，队列可能会无限制地增长，导致内存溢出等问题。因此，在实际使用中需要根据具体的场景来合理设置线程池的大小和任务队列的容量，以充分利用系统资源并保证系统的稳定性。</p></div><h3 id="newscheduledthreadpool" tabindex="-1">newScheduledThreadPool <a class="header-anchor" href="#newscheduledthreadpool" aria-label="Permalink to &quot;newScheduledThreadPool&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ScheduledExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newScheduledThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScheduledThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(corePoolSize);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScheduledThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> corePoolSize) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(corePoolSize, Integer.MAX_VALUE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DelayedWorkQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>newScheduledThreadPool</code> 用于创建支持定时和周期性任务执行的线程池。可执行定时任务、周期性任务、延迟执行任务。 <code>DelayedWorkQueue</code> 是一种设计为定时任务的延迟队列，通过 <code>put(Runnable e)</code>、<code>add(Runnable e)</code>、<code>offer(Runnable e, long timeout, TimeUnit unit)</code> 三种方式添加元素，且队列可以扩容。</p><p>下面我们看一个示例代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ScheduledExecutorService scheduledExecutorService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newScheduledThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3 秒后执行！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2 秒后执行！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1 秒后执行！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shutdown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行结果：</p><blockquote><p>1 秒后执行！</p><p>2 秒后执行！</p><p>3 秒后执行！</p></blockquote><h3 id="newsinglethreadexecutor" tabindex="-1">newSingleThreadExecutor <a class="header-anchor" href="#newsinglethreadexecutor" aria-label="Permalink to &quot;newSingleThreadExecutor&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FinalizableDelegatedExecutorService</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                                0L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedBlockingQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>newSingleThreadExecutor</code> 用于创建一个单线程的线程池。顾名思义，这个线程池中只有一个线程，所有提交到线程池的任务将按照提交的顺序依次执行。即使线程池中的唯一线程因某些原因意外终止，线程池也会创建一个新的线程来继续执行后续的任务，从而保证任务的顺序性和稳定性。</p><h3 id="newsinglethreadscheduledexecutor" tabindex="-1">newSingleThreadScheduledExecutor <a class="header-anchor" href="#newsinglethreadscheduledexecutor" aria-label="Permalink to &quot;newSingleThreadScheduledExecutor&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ScheduledExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadScheduledExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DelegatedScheduledExecutorService</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScheduledThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p><code>newSingleThreadScheduledExecutor</code> 是一个调度线程池，它保证所有调度任务在单个线程中按顺序执行。</p><p>下面我们看一个示例代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ScheduledExecutorService scheduledExecutorService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newSingleThreadScheduledExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 安排一个在特定延迟后执行一次的任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1秒后，执行一次的任务。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 安排一个周期性执行的任务，每隔一定时间执行一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleAtFixedRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2秒后，每隔 1 秒执行一次的任务。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 安排一个周期性执行的任务，在上一个任务执行结束后一定延迟再次执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scheduledExecutorService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scheduleWithFixedDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;在上一个任务结束后 1 秒，10 秒后再执行该任务。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行结果：</p><blockquote><p>1秒后，执行一次的任务。</p><p>在上一个任务结束后 1 秒，10 秒后再执行该任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>在上一个任务结束后 1 秒，10 秒后再执行该任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>2秒后，每隔 1 秒执行一次的任务。</p><p>在上一个任务结束后 1 秒，10 秒后再执行该任务。</p></blockquote><h3 id="newworkstealingpool" tabindex="-1">newWorkStealingPool <a class="header-anchor" href="#newworkstealingpool" aria-label="Permalink to &quot;newWorkStealingPool&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newWorkStealingPool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForkJoinPool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (Runtime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRuntime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">availableProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>newWorkStealingPool</code> 是 Java 8 引入的一个新型线程池，该线程池使用 <code>工作窃取</code> 的算法，可用于可并行化且计算密集型的任务。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>工作窃取算法</li></ul><p>当线程执行完自己队列中的任务后，它会尝试从其他线程的队列中“窃取”任务来执行，从而实现负载均衡。这种算法能够减少线程间的竞争，提高系统的整体性能。</p></div><p>newWorkStealingPool 是基于 ForkJoinPool 实现的线程池，不同于 ThreadPoolExecutor 的基础架构。它通过任务拆分实现并行处理，尤其适合处理大任务。ForkJoinPool 会将大任务分解为多个小任务，由不同线程处理，而不是单一线程执行。</p><h2 id="线程池常用方法-说明" tabindex="-1">线程池常用方法 &amp; 说明 <a class="header-anchor" href="#线程池常用方法-说明" aria-label="Permalink to &quot;线程池常用方法 &amp; 说明&quot;">​</a></h2><ul><li><strong>submit()</strong>： 线程池建立完毕之后，我们就需要往线程池提交任务。这里我们可以通过线程池的submit方法即可。</li><li><strong>execute()</strong>： 同 <code>submit()</code> 方法一样，都是向线程池提交任务的。</li></ul><div class="tip custom-block"><p class="custom-block-title">拓展</p><p><code>submit()</code> &amp; <code>execute()</code> 差异</p><ol><li><code>submit()</code> 方法是定义在 ExecutorService 接口中，而 <code>execute()</code> 方法是定义在 Executor 接口中。</li><li><code>submit()</code> 可提交实现 Callable 或 Runnable 的对象，而 <code>execute()</code> 只能提交 Runnable 的对象。</li><li><code>submit()</code> 会抛出异常，而 <code>execute()</code> 异常不会被抛出，需要开发人员自己去处理。</li><li><code>submit()</code> 执行完成后，会返回一个 Future 对象，而 <code>execute()</code> 不会返回任何内容。</li></ol></div><ul><li><strong>shutdown()</strong>： 关闭线程池。</li></ul>`,42)]))}const c=i(l,[["render",h]]);export{o as __pageData,c as default};
